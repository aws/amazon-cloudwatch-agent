{
  "name": "Code Quality Analyzer",
  "description": "Analyzes modified Go source files for code quality improvements including code smells, design patterns, and best practices",
  "trigger": {
    "type": "file_change",
    "patterns": ["**/*.go"],
    "excludePatterns": ["**/*_test.go", "**/testdata/**", "**/vendor/**"]
  },
  "request": {
    "message": "Analyze the modified Go code for potential improvements focusing on:\n\n1. **Code Smells & Anti-patterns:**\n   - Long functions/methods that should be broken down\n   - Duplicate code that could be extracted\n   - Complex conditional logic that could be simplified\n   - Magic numbers/strings that should be constants\n   - Poor variable/function naming\n\n2. **Design Patterns & Architecture:**\n   - Opportunities to apply Go idioms and patterns\n   - Interface usage and abstraction improvements\n   - Error handling best practices\n   - Concurrency patterns (goroutines, channels)\n\n3. **Performance & Maintainability:**\n   - Memory allocation optimizations\n   - Unnecessary allocations or copies\n   - Inefficient algorithms or data structures\n   - Missing documentation for exported functions\n   - Code organization and package structure\n\n4. **Go-Specific Best Practices:**\n   - Proper use of defer statements\n   - Context usage for cancellation/timeouts\n   - Resource cleanup and error handling\n   - Testing improvements (if test files are modified)\n\nPlease provide specific, actionable suggestions with code examples where helpful. Focus on improvements that enhance readability, maintainability, and performance while preserving existing functionality.\n\nModified files: {{changedFiles}}"
  }
}