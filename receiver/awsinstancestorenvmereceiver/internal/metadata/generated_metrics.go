// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

var MetricsInfo = metricsInfo{
	DiskioInstanceStoreTotalReadBytes: metricInfo{
		Name: "diskio_instance_store_total_read_bytes",
	},
	DiskioInstanceStoreTotalReadOps: metricInfo{
		Name: "diskio_instance_store_total_read_ops",
	},
	DiskioInstanceStoreTotalReadTime: metricInfo{
		Name: "diskio_instance_store_total_read_time",
	},
	DiskioInstanceStoreTotalWriteBytes: metricInfo{
		Name: "diskio_instance_store_total_write_bytes",
	},
	DiskioInstanceStoreTotalWriteOps: metricInfo{
		Name: "diskio_instance_store_total_write_ops",
	},
	DiskioInstanceStoreTotalWriteTime: metricInfo{
		Name: "diskio_instance_store_total_write_time",
	},
	DiskioInstanceStoreVolumePerformanceExceededIops: metricInfo{
		Name: "diskio_instance_store_volume_performance_exceeded_iops",
	},
	DiskioInstanceStoreVolumePerformanceExceededTp: metricInfo{
		Name: "diskio_instance_store_volume_performance_exceeded_tp",
	},
	DiskioInstanceStoreVolumeQueueLength: metricInfo{
		Name: "diskio_instance_store_volume_queue_length",
	},
}

type metricsInfo struct {
	DiskioInstanceStoreTotalReadBytes                metricInfo
	DiskioInstanceStoreTotalReadOps                  metricInfo
	DiskioInstanceStoreTotalReadTime                 metricInfo
	DiskioInstanceStoreTotalWriteBytes               metricInfo
	DiskioInstanceStoreTotalWriteOps                 metricInfo
	DiskioInstanceStoreTotalWriteTime                metricInfo
	DiskioInstanceStoreVolumePerformanceExceededIops metricInfo
	DiskioInstanceStoreVolumePerformanceExceededTp   metricInfo
	DiskioInstanceStoreVolumeQueueLength             metricInfo
}

type metricInfo struct {
	Name string
}

type metricDiskioInstanceStoreTotalReadBytes struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_total_read_bytes metric with initial data.
func (m *metricDiskioInstanceStoreTotalReadBytes) init() {
	m.data.SetName("diskio_instance_store_total_read_bytes")
	m.data.SetDescription("The total number of read bytes transferred")
	m.data.SetUnit("By")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreTotalReadBytes) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreTotalReadBytes) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreTotalReadBytes) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreTotalReadBytes(cfg MetricConfig) metricDiskioInstanceStoreTotalReadBytes {
	m := metricDiskioInstanceStoreTotalReadBytes{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreTotalReadOps struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_total_read_ops metric with initial data.
func (m *metricDiskioInstanceStoreTotalReadOps) init() {
	m.data.SetName("diskio_instance_store_total_read_ops")
	m.data.SetDescription("The total number of completed read operations")
	m.data.SetUnit("1")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreTotalReadOps) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreTotalReadOps) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreTotalReadOps) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreTotalReadOps(cfg MetricConfig) metricDiskioInstanceStoreTotalReadOps {
	m := metricDiskioInstanceStoreTotalReadOps{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreTotalReadTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_total_read_time metric with initial data.
func (m *metricDiskioInstanceStoreTotalReadTime) init() {
	m.data.SetName("diskio_instance_store_total_read_time")
	m.data.SetDescription("The total time spent, in nanoseconds, by all completed read operations")
	m.data.SetUnit("ns")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreTotalReadTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreTotalReadTime) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreTotalReadTime) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreTotalReadTime(cfg MetricConfig) metricDiskioInstanceStoreTotalReadTime {
	m := metricDiskioInstanceStoreTotalReadTime{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreTotalWriteBytes struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_total_write_bytes metric with initial data.
func (m *metricDiskioInstanceStoreTotalWriteBytes) init() {
	m.data.SetName("diskio_instance_store_total_write_bytes")
	m.data.SetDescription("The total number of write bytes transferred")
	m.data.SetUnit("By")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreTotalWriteBytes) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreTotalWriteBytes) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreTotalWriteBytes) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreTotalWriteBytes(cfg MetricConfig) metricDiskioInstanceStoreTotalWriteBytes {
	m := metricDiskioInstanceStoreTotalWriteBytes{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreTotalWriteOps struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_total_write_ops metric with initial data.
func (m *metricDiskioInstanceStoreTotalWriteOps) init() {
	m.data.SetName("diskio_instance_store_total_write_ops")
	m.data.SetDescription("The total number of completed write operations")
	m.data.SetUnit("1")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreTotalWriteOps) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreTotalWriteOps) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreTotalWriteOps) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreTotalWriteOps(cfg MetricConfig) metricDiskioInstanceStoreTotalWriteOps {
	m := metricDiskioInstanceStoreTotalWriteOps{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreTotalWriteTime struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_total_write_time metric with initial data.
func (m *metricDiskioInstanceStoreTotalWriteTime) init() {
	m.data.SetName("diskio_instance_store_total_write_time")
	m.data.SetDescription("The total time spent, in nanoseconds, by all completed write operations")
	m.data.SetUnit("ns")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreTotalWriteTime) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreTotalWriteTime) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreTotalWriteTime) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreTotalWriteTime(cfg MetricConfig) metricDiskioInstanceStoreTotalWriteTime {
	m := metricDiskioInstanceStoreTotalWriteTime{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreVolumePerformanceExceededIops struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_volume_performance_exceeded_iops metric with initial data.
func (m *metricDiskioInstanceStoreVolumePerformanceExceededIops) init() {
	m.data.SetName("diskio_instance_store_volume_performance_exceeded_iops")
	m.data.SetDescription("The total time, in nanoseconds, that IOPS demand exceeded the Instance Store device's performance")
	m.data.SetUnit("ns")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreVolumePerformanceExceededIops) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreVolumePerformanceExceededIops) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreVolumePerformanceExceededIops) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreVolumePerformanceExceededIops(cfg MetricConfig) metricDiskioInstanceStoreVolumePerformanceExceededIops {
	m := metricDiskioInstanceStoreVolumePerformanceExceededIops{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreVolumePerformanceExceededTp struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_volume_performance_exceeded_tp metric with initial data.
func (m *metricDiskioInstanceStoreVolumePerformanceExceededTp) init() {
	m.data.SetName("diskio_instance_store_volume_performance_exceeded_tp")
	m.data.SetDescription("The total time, in nanoseconds, that throughput demand exceeded the Instance Store device's performance")
	m.data.SetUnit("ns")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricDiskioInstanceStoreVolumePerformanceExceededTp) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreVolumePerformanceExceededTp) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreVolumePerformanceExceededTp) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreVolumePerformanceExceededTp(cfg MetricConfig) metricDiskioInstanceStoreVolumePerformanceExceededTp {
	m := metricDiskioInstanceStoreVolumePerformanceExceededTp{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskioInstanceStoreVolumeQueueLength struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills diskio_instance_store_volume_queue_length metric with initial data.
func (m *metricDiskioInstanceStoreVolumeQueueLength) init() {
	m.data.SetName("diskio_instance_store_volume_queue_length")
	m.data.SetDescription("The number of read and write operations waiting to be completed")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
}

func (m *metricDiskioInstanceStoreVolumeQueueLength) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskioInstanceStoreVolumeQueueLength) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskioInstanceStoreVolumeQueueLength) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskioInstanceStoreVolumeQueueLength(cfg MetricConfig) metricDiskioInstanceStoreVolumeQueueLength {
	m := metricDiskioInstanceStoreVolumeQueueLength{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                                                 MetricsBuilderConfig // config of the metrics builder.
	startTime                                              pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                                        int                  // maximum observed number of metrics per resource.
	metricsBuffer                                          pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                                              component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter                         map[string]filter.Filter
	resourceAttributeExcludeFilter                         map[string]filter.Filter
	metricDiskioInstanceStoreTotalReadBytes                metricDiskioInstanceStoreTotalReadBytes
	metricDiskioInstanceStoreTotalReadOps                  metricDiskioInstanceStoreTotalReadOps
	metricDiskioInstanceStoreTotalReadTime                 metricDiskioInstanceStoreTotalReadTime
	metricDiskioInstanceStoreTotalWriteBytes               metricDiskioInstanceStoreTotalWriteBytes
	metricDiskioInstanceStoreTotalWriteOps                 metricDiskioInstanceStoreTotalWriteOps
	metricDiskioInstanceStoreTotalWriteTime                metricDiskioInstanceStoreTotalWriteTime
	metricDiskioInstanceStoreVolumePerformanceExceededIops metricDiskioInstanceStoreVolumePerformanceExceededIops
	metricDiskioInstanceStoreVolumePerformanceExceededTp   metricDiskioInstanceStoreVolumePerformanceExceededTp
	metricDiskioInstanceStoreVolumeQueueLength             metricDiskioInstanceStoreVolumeQueueLength
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                                   mbc,
		startTime:                                pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                            pmetric.NewMetrics(),
		buildInfo:                                settings.BuildInfo,
		metricDiskioInstanceStoreTotalReadBytes:  newMetricDiskioInstanceStoreTotalReadBytes(mbc.Metrics.DiskioInstanceStoreTotalReadBytes),
		metricDiskioInstanceStoreTotalReadOps:    newMetricDiskioInstanceStoreTotalReadOps(mbc.Metrics.DiskioInstanceStoreTotalReadOps),
		metricDiskioInstanceStoreTotalReadTime:   newMetricDiskioInstanceStoreTotalReadTime(mbc.Metrics.DiskioInstanceStoreTotalReadTime),
		metricDiskioInstanceStoreTotalWriteBytes: newMetricDiskioInstanceStoreTotalWriteBytes(mbc.Metrics.DiskioInstanceStoreTotalWriteBytes),
		metricDiskioInstanceStoreTotalWriteOps:   newMetricDiskioInstanceStoreTotalWriteOps(mbc.Metrics.DiskioInstanceStoreTotalWriteOps),
		metricDiskioInstanceStoreTotalWriteTime:  newMetricDiskioInstanceStoreTotalWriteTime(mbc.Metrics.DiskioInstanceStoreTotalWriteTime),
		metricDiskioInstanceStoreVolumePerformanceExceededIops: newMetricDiskioInstanceStoreVolumePerformanceExceededIops(mbc.Metrics.DiskioInstanceStoreVolumePerformanceExceededIops),
		metricDiskioInstanceStoreVolumePerformanceExceededTp:   newMetricDiskioInstanceStoreVolumePerformanceExceededTp(mbc.Metrics.DiskioInstanceStoreVolumePerformanceExceededTp),
		metricDiskioInstanceStoreVolumeQueueLength:             newMetricDiskioInstanceStoreVolumeQueueLength(mbc.Metrics.DiskioInstanceStoreVolumeQueueLength),
		resourceAttributeIncludeFilter:                         make(map[string]filter.Filter),
		resourceAttributeExcludeFilter:                         make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.Device.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["Device"] = filter.CreateFilter(mbc.ResourceAttributes.Device.MetricsInclude)
	}
	if mbc.ResourceAttributes.Device.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["Device"] = filter.CreateFilter(mbc.ResourceAttributes.Device.MetricsExclude)
	}
	if mbc.ResourceAttributes.InstanceID.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["InstanceId"] = filter.CreateFilter(mbc.ResourceAttributes.InstanceID.MetricsInclude)
	}
	if mbc.ResourceAttributes.InstanceID.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["InstanceId"] = filter.CreateFilter(mbc.ResourceAttributes.InstanceID.MetricsExclude)
	}
	if mbc.ResourceAttributes.SerialNumber.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["SerialNumber"] = filter.CreateFilter(mbc.ResourceAttributes.SerialNumber.MetricsInclude)
	}
	if mbc.ResourceAttributes.SerialNumber.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["SerialNumber"] = filter.CreateFilter(mbc.ResourceAttributes.SerialNumber.MetricsExclude)
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricDiskioInstanceStoreTotalReadBytes.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreTotalReadOps.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreTotalReadTime.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreTotalWriteBytes.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreTotalWriteOps.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreTotalWriteTime.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreVolumePerformanceExceededIops.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreVolumePerformanceExceededTp.emit(ils.Metrics())
	mb.metricDiskioInstanceStoreVolumeQueueLength.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordDiskioInstanceStoreTotalReadBytesDataPoint adds a data point to diskio_instance_store_total_read_bytes metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreTotalReadBytesDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreTotalReadBytes.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreTotalReadOpsDataPoint adds a data point to diskio_instance_store_total_read_ops metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreTotalReadOpsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreTotalReadOps.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreTotalReadTimeDataPoint adds a data point to diskio_instance_store_total_read_time metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreTotalReadTimeDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreTotalReadTime.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreTotalWriteBytesDataPoint adds a data point to diskio_instance_store_total_write_bytes metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreTotalWriteBytesDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreTotalWriteBytes.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreTotalWriteOpsDataPoint adds a data point to diskio_instance_store_total_write_ops metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreTotalWriteOpsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreTotalWriteOps.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreTotalWriteTimeDataPoint adds a data point to diskio_instance_store_total_write_time metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreTotalWriteTimeDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreTotalWriteTime.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreVolumePerformanceExceededIopsDataPoint adds a data point to diskio_instance_store_volume_performance_exceeded_iops metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreVolumePerformanceExceededIopsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreVolumePerformanceExceededIops.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreVolumePerformanceExceededTpDataPoint adds a data point to diskio_instance_store_volume_performance_exceeded_tp metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreVolumePerformanceExceededTpDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreVolumePerformanceExceededTp.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskioInstanceStoreVolumeQueueLengthDataPoint adds a data point to diskio_instance_store_volume_queue_length metric.
func (mb *MetricsBuilder) RecordDiskioInstanceStoreVolumeQueueLengthDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskioInstanceStoreVolumeQueueLength.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
