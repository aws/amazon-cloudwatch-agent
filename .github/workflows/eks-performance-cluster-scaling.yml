# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT
name: EKS Cluster Scaling

on:
  schedule:
    - cron: '0 9 * * 0'  # Scale up: Runs every Sunday at 9:00 AM
    - cron: '0 21 * * 1'  # Scale down: Runs every Monday at 9:00 PM
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        type: string
        default: 'us-west-2'
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string
        default: 'eks-performance'
      desired_capacity_per_nodegroup:
        description: 'Desired capacity for each node group'
        required: true
        type: number
        default: 500

env:
  AWS_REGION: ${{ inputs.region || 'us-west-2' }}
  CLUSTER_NAME: ${{ inputs.cluster_name || 'eks-performance' }}
  DESIRED_CAPACITY_PER_NODEGROUP: ${{ inputs.desired_capacity_per_nodegroup || 500 }}
  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 3600  # 1 hour duration
  CWA_GITHUB_TEST_REPO_NAME: "aws/amazon-cloudwatch-agent-test"
  CWA_GITHUB_TEST_REPO_URL: "https://github.com/aws/amazon-cloudwatch-agent-test.git"
  CWA_GITHUB_TEST_REPO_BRANCH: "main"

jobs:
  scale-eks-cluster:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.CWA_GITHUB_TEST_REPO_NAME }}
          ref: ${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE}}
          aws-region: ${{ inputs.region || 'us-west-2' }}
          role-duration-seconds: ${{ env.TERRAFORM_AWS_ASSUME_ROLE_DURATION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl get nodes -o wide

      - name: Scale up node groups (Sunday)
        if: github.event.schedule == '0 9 * * 0'
        run: |
          echo "Starting scale UP operation with desired capacity: 500"
          
          for i in {1..10}; do
            echo "Scaling node group: eks-performance-node-${i} to 500"
            aws eks update-nodegroup-config \
              --cluster-name eks-performance \
              --nodegroup-name eks-performance-node-${i} \
              --region us-west-2 \
              --scaling-config desiredSize=500
          
            echo "Waiting 1 minute before scaling next node group..."
            sleep 60
          done

      - name: Scale down node groups (Monday)
        if: github.event.schedule == '0 21 * * 1'
        run: |
          echo "Starting scale DOWN operation with desired capacity: 0"
          
          for i in {1..10}; do
            echo "Scaling node group: eks-performance-node-${i} to 0"
            aws eks update-nodegroup-config \
              --cluster-name eks-performance \
              --nodegroup-name eks-performance-node-${i} \
              --region us-west-2 \
              --scaling-config desiredSize=0
          
            echo "Waiting 1 minute before scaling next node group..."
            sleep 60
          done

      - name: Scale node groups (Manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Starting manual scaling operation with desired capacity: ${{ env.DESIRED_CAPACITY_PER_NODEGROUP }}"
          
          for i in {1..10}; do
            echo "Scaling node group: eks-performance-node-${i} to ${{ env.DESIRED_CAPACITY_PER_NODEGROUP }}"
            aws eks update-nodegroup-config \
              --cluster-name eks-performance \
              --nodegroup-name eks-performance-node-${i} \
              --region us-west-2 \
              --scaling-config desiredSize=${{ env.DESIRED_CAPACITY_PER_NODEGROUP }}
          
          done

      - name: Validate total node count
        run: |
          echo "Waiting 20 minutes for scaling operations to complete..."
          sleep 1200
          
          echo "Validating total number of nodes in the cluster..."
          ACTUAL_NODE_COUNT=$(kubectl get nodes --no-headers | wc -l)
          
          # Determine expected count based on trigger type
          if [ "${{ github.event.schedule }}" = "0 21 * * 1" ]; then
            EXPECTED_NODE_COUNT=$((10 * 0))
          else
            EXPECTED_NODE_COUNT=$((10 * ${{ env.DESIRED_CAPACITY_PER_NODEGROUP }}))
          fi
          
          echo "Expected total nodes: ${EXPECTED_NODE_COUNT}"
          echo "Actual total nodes: ${ACTUAL_NODE_COUNT}"
          
          if [ "$ACTUAL_NODE_COUNT" -eq "$EXPECTED_NODE_COUNT" ]; then
            echo "Validation successful! Node count matches expected value."
          else
            echo "Validation failed. Expected ${EXPECTED_NODE_COUNT} nodes but found ${ACTUAL_NODE_COUNT} nodes."
            exit 1
          fi