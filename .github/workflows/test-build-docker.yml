# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: Build And Upload Docker Image
env:
  CWA_GITHUB_TEST_REPO_NAME: "aws/amazon-cloudwatch-agent-test"

on:
  workflow_dispatch:
    inputs:
      ContainerRepositoryNameAndTag:
        # e.g. "cwagent-integration-test:SHA"
        # e.g. "cwa-release:latest"
        # e.g. "cwa_nonprod:latest"
        description: "ECR repo name and tag"
        required: true
        type: string
      BucketKey:
        # e.g. s3://<bucket>/integration-test/binary/<SHA>"
        # e.g. s3://<bucket>/nonprod
        # e.g. s3://<bucket>/release
        description: "S3 URI to upload artifacts into."
        required: true
        type: string
      PackageBucketKey:
        description: "Integration tests put the MSI and PKG in a different bucket path than the binaries."
        required: true
        type: string
  workflow_call:
    inputs:
      ContainerRepositoryNameAndTag:
        # e.g. "cwagent-integration-test:SHA"
        # e.g. "cwa-release:latest"
        # e.g. "cwa_nonprod:latest"
        description: "ECR repo name and tag"
        required: true
        type: string
      BucketKey:
        # e.g. s3://<bucket>/integration-test/binary/<SHA>"
        # e.g. s3://<bucket>/nonprod
        # e.g. s3://<bucket>/release
        description: "S3 URI to upload artifacts into."
        required: true
        type: string
      PackageBucketKey:
        description: "Integration tests put the MSI and PKG in a different bucket path than the binaries."
        required: true
        type: string

jobs:
  MakeBinary:
    name: 'MakeBinary'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2

      - name: Cache container
        id: cached_container
        uses: actions/cache@v3
        with:
          key: "cached_container_${{ github.sha }}"
          path: go.mod

      - name: Login ECR
        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false
        uses: docker/setup-qemu-action@v3

      # Build dir is ignored in our .dockerignore thus need to copy to another dir.
      - name: Copy Binary For Agent Image Build
        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false
        run: |
          mkdir amd64
          mkdir arm64
          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/amd64/amazon-cloudwatch-agent.rpm amd64/amazon-cloudwatch-agent.rpm
          aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/${{ inputs.BucketKey }}/linux/arm64/amazon-cloudwatch-agent.rpm arm64/amazon-cloudwatch-agent.rpm

      - name: Get ECR Repo name
        id: repo_name
        env:
          ContainerRepositoryNameAndTag: ${{ inputs.ContainerRepositoryNameAndTag }}
        run: |
          RepoName=`echo $ContainerRepositoryNameAndTag | awk -F: '{print $1}'`
          echo "::set-output name=ContainerRepositoryName::$RepoName"

      - name: Build Cloudwatch Agent Image amd64
        uses: docker/build-push-action@v6
        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false
        with:
          file: amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localal2/Dockerfile
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.repo_name.outputs.ContainerRepositoryName }}:linux-amd64
          platforms: linux/amd64
          provenance: false

      - name: Build Cloudwatch Agent Image arm64
        uses: docker/build-push-action@v6
        if: contains(inputs.BucketKey, 'test') == false || steps.cached_container.outputs.cache-hit == false
        with:
          file: amazon-cloudwatch-container-insights/cloudwatch-agent-dockerfile/localal2/Dockerfile
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.repo_name.outputs.ContainerRepositoryName }}:linux-arm64
          platforms: linux/arm64
          provenance: false