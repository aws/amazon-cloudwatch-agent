# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: Run Integration Tests
env:
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours
  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  CF_IAM_ROLE: ${{ secrets.CF_IAM_ROLE }}
  CF_KEY_NAME: ${{ secrets.CF_KEY_NAME }}
  ECR_INTEGRATION_TEST_REPO: "windows-container-internal"
  CWA_GITHUB_TEST_REPO_NAME: "aws/amazon-cloudwatch-agent-test"
  CWA_GITHUB_TEST_REPO_URL: "https://github.com/aws/amazon-cloudwatch-agent-test.git"
  CWA_GITHUB_TEST_REPO_BRANCH: "test-main-ciwindows"
  TERRAFORM_AWS_ASSUME_ROLE_ITAR: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}
  S3_INTEGRATION_BUCKET_ITAR: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}
  TERRAFORM_AWS_ASSUME_ROLE_CN: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}
  S3_INTEGRATION_BUCKET_CN: ${{ vars.S3_INTEGRATION_BUCKET_CN }}

on:
  push:
    branches:
      - main*
    paths-ignore:
      - '**/*.md'
      - 'NOTICE'
      - 'RELEASE_NOTES'
      - 'THIRD-PARTY'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/integration-test.yml'
  workflow_dispatch:
    inputs:
      plugins:
        description: 'Comma delimited list of plugins to test. Default is empty, and tests everything'
        required: false
        default: ''
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  BuildAndUpload:
    uses: ./.github/workflows/test-build.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      BucketKey: "integration-test/binary/${{ github.sha }}"
      PackageBucketKey: "integration-test/packaging/${{ github.sha }}"
      TerraformAWSAssumeRole: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
      Bucket: ${{ vars.S3_INTEGRATION_BUCKET }}

  BuildAndUploadPackages:
    uses: ./.github/workflows/test-build-packages.yml
    needs: [BuildAndUpload]
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      BucketKey: "integration-test/binary/${{ github.sha }}"
      PackageBucketKey: "integration-test/packaging/${{ github.sha }}"
      TerraformAWSAssumeRole: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
      Bucket: ${{ vars.S3_INTEGRATION_BUCKET }}

  BuildDocker:
    needs: [BuildAndUpload]
    uses: ./.github/workflows/test-build-docker.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      ContainerRepositoryNameAndTag: "cwagent-integration-test:${{ github.sha }}"
      BucketKey: "integration-test/binary/${{ github.sha }}"
      PackageBucketKey: "integration-test/packaging/${{ github.sha }}"

#  BuildAndUploadITAR:
#    uses: ./.github/workflows/test-build.yml
#    secrets: inherit
#    permissions:
#      id-token: write
#      contents: read
#    with:
#      BucketKey: "integration-test/binary/${{ github.sha }}"
#      PackageBucketKey: "integration-test/packaging/${{ github.sha }}"
#      Region: "us-gov-east-1"
#      TerraformAWSAssumeRole: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_ITAR }}
#      Bucket: ${{ vars.S3_INTEGRATION_BUCKET_ITAR }}
#
#  BuildAndUploadCN:
#    uses: ./.github/workflows/test-build.yml
#    secrets: inherit
#    permissions:
#      id-token: write
#      contents: read
#    with:
#      BucketKey: "integration-test/binary/${{ github.sha }}"
#      PackageBucketKey: "integration-test/packaging/${{ github.sha }}"
#      Region: "cn-north-1"
#      TerraformAWSAssumeRole: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE_CN }}
#      Bucket: ${{ vars.S3_INTEGRATION_BUCKET_CN }}

  GenerateTestMatrix:
    name: 'GenerateTestMatrix'
    runs-on: ubuntu-latest
    outputs:
      eks_daemon_matrix: ${{ steps.set-matrix.outputs.eks_daemon_matrix }}
      eks_deployment_matrix: ${{ steps.set-matrix.outputs.eks_deployment_matrix }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2

      - name: Generate matrix
        id: set-matrix
        run: |
          go run --tags=generator generator/test_case_generator.go
          echo "::set-output name=eks_daemon_matrix::$(echo $(cat generator/resources/eks_daemon_complete_test_matrix.json))"
          echo "::set-output name=eks_deployment_matrix::$(echo $(cat generator/resources/eks_deployment_complete_test_matrix.json))"

      - name: Echo test plan matrix
        run: |
          echo "eks_daemon_matrix: ${{ steps.set-matrix.outputs.eks_daemon_matrix }}"
          echo "eks_deployment_matrix: ${{ steps.set-matrix.outputs.eks_deployment_matrix }}"

  EKSIntegrationTest:
    name: 'EKSIntegrationTest'
    runs-on: ubuntu-latest
    needs: [ BuildAndUpload, BuildDocker, GenerateTestMatrix ]
    strategy:
      fail-fast: false
      matrix:
        arrays: ${{ fromJson(needs.GenerateTestMatrix.outputs.eks_daemon_matrix) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2
          role-duration-seconds: ${{ env.TERRAFORM_AWS_ASSUME_ROLE_DURATION }}

      - name: Cache if success
        id: eks-ec2-integration-test
        uses: actions/cache@v3
        with:
          path: go.mod
          key: ${{ matrix.arrays.terraform_dir }}-${{ matrix.arrays.k8s_version }}-${{ matrix.arrays.instanceType }}-${{ github.sha }}-${{ matrix.arrays.os }}-${{ matrix.arrays.test_dir }}

      - name: Login ECR
        id: login-ecr
        if: steps.eks-ec2-integration-test.outputs.cache-hit != 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Verify Terraform version
        if: steps.eks-ec2-integration-test.outputs.cache-hit != 'true'
        run: terraform --version

      - name: Terraform apply
        if: steps.eks-ec2-integration-test.outputs.cache-hit != 'true'
        uses: nick-fields/retry@v2
        with:
          max_attempts: 2
          timeout_minutes: 90 # EKS takes about 20 minutes to spin up a cluster and service on the cluster
          retry_wait_seconds: 5
          command: |
            if [ "${{ matrix.arrays.terraform_dir }}" != "" ]; then
              cd "${{ matrix.arrays.terraform_dir }}"
            else
              cd terraform/eks/daemon
            fi

            terraform init
            if terraform apply --auto-approve \
              -var="test_dir=${{ matrix.arrays.test_dir }}"\
              -var="cwagent_image_repo=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_INTEGRATION_TEST_REPO }}" \
              -var="cwagent_image_tag=${{ github.sha }}" \
              -var="ami_type=${{ matrix.arrays.ami }}" \
              -var="instance_type=${{ matrix.arrays.instanceType }}" \
              -var="k8s_version=${{ matrix.arrays.k8s_version }}"; then
              terraform destroy -auto-approve
            else
              terraform destroy -auto-approve && exit 1
            fi

      - name: Terraform destroy
        if: ${{ cancelled() || failure() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 5
          command: |
            if [ "${{ matrix.arrays.terraform_dir }}" != "" ]; then
              cd "${{ matrix.arrays.terraform_dir }}"
            else
              cd terraform/eks/daemon
            fi
            terraform destroy --auto-approve
