# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: Run Integration Tests
env:
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  TERRAFORM_AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
  TERRAFORM_AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  VPC_SECURITY_GROUPS_IDS: ${{ secrets.VPC_SECURITY_GROUPS_IDS }}
  IAM_ROLE: ${{ secrets.IAM_ROLE }}

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  MakeBinary:
    name: 'MakeBinary'
    runs-on: ubuntu-latest
    steps:
      # Set up building environment, patch the dev repo code on dispatch events.
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.15.15

      - name: Install rpm
        run: sudo apt install rpm

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Cache go
        id: cached_go
        uses: actions/cache@v2
        env:
          cache-name: cached_go_modules
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: v1-go-pkg-mod-${{ hashFiles('**/go.sum') }}

      - name: Cache binaries
        id: cached_binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.sha }}"
          path: build

      - name: Build Binaries
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        run: make build package-rpm package-deb package-win package-darwin

      - name: Upload to s3
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        run: aws s3 cp build/bin s3://${S3_INTEGRATION_BUCKET}/integration-test/binary/${{ github.sha }} --recursive

  MakeMSIZip:
    name: 'MakeMSIZip'
    runs-on: ubuntu-latest
    needs: [MakeBinary]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.15.15

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Cache win zip
        id: cached_win_zip
        uses: actions/cache@v2
        with:
          key: "cached_win_zip_${{ github.sha }}"
          path: buildMSI.zip

      - name: Copy binary
        if: steps.cached_win_zip.outputs.cache-hit != 'true'
        run: |
          aws s3 cp s3://${S3_INTEGRATION_BUCKET}/integration-test/binary/${{ github.sha }} . --recursive

      - uses: montudor/action-zip@v1
        if: steps.cached_win_zip.outputs.cache-hit != 'true'
        with:
          args: unzip -qq windows/amd64/amazon-cloudwatch-agent.zip -d windows-agent

      - name: Create msi dep folder and copy deps
        if: steps.cached_win_zip.outputs.cache-hit != 'true'
        run: |
          export version=$(cat CWAGENT_VERSION)
          echo cw agent version $version
          mkdir msi_dep
          cp -r integration/msi/tools/. msi_dep/
          cp -r windows-agent/amazon-cloudwatch-agent/. msi_dep/
          go run integration/msi/tools/msiversion/msiversionconverter.go $version msi_dep/amazon-cloudwatch-agent.wxs '<version>' --tags=integration
          go run integration/msi/tools/msiversion/msiversionconverter.go $version msi_dep/manifest.json __VERSION__ --tags=integration

      - uses: papeloto/action-zip@v1
        if: steps.cached_win_zip.outputs.cache-hit != 'true'
        with:
          files: msi_dep/
          dest: buildMSI.zip

      - name: Upload zip
        if: steps.cached_win_zip.outputs.cache-hit != 'true'
        run: aws s3 cp buildMSI.zip s3://${S3_INTEGRATION_BUCKET}/integration-test/packaging/${{ github.sha }}/buildMSI.zip

  MakeMacPkg:
    name: 'MakeMacPkg'
    runs-on: macos-latest
    needs: [MakeBinary]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.15.15

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Cache pkg
        id: cached_pkg
        uses: actions/cache@v2
        with:
          key: "cached_pkg_${{ github.sha }}"
          path: RELEASE_NOTES

      - name: Copy binary
        if: steps.cached_pkg.outputs.cache-hit != 'true'
        run: |
          aws s3 cp s3://${S3_INTEGRATION_BUCKET}/integration-test/binary/${{ github.sha }} . --recursive

      - name: Create pkg dep folder and copy deps
        if: steps.cached_pkg.outputs.cache-hit != 'true'
        run: |
          echo cw agent version $(cat CWAGENT_VERSION)
          cp CWAGENT_VERSION /tmp/CWAGENT_VERSION
          cp -r integration/pkg/tools/. /tmp/
          cp -r darwin/amd64/. /tmp/

      - name: Build And Upload PKG
        if: steps.cached_pkg.outputs.cache-hit != 'true'
        working-directory: /tmp/
        run : |
          chmod +x create_pkg.sh
          ./create_pkg.sh ${{ secrets.S3_INTEGRATION_BUCKET }} ${{ github.sha }}

  BuildMSI:
    name: 'BuildMSI'
    runs-on: windows-latest
    needs: [MakeMSIZip]
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Cache msi
        id: cached_msi
        uses: actions/cache@v2
        with:
          key: "cached_msi_${{ github.sha }}"
          path: buildMSI/amazon-cloudwatch-agent.msi

      # Using the env variable returns "" for bucket name thus use the secret
      - name: Copy msi
        if: steps.cached_msi.outputs.cache-hit != 'true'
        run: aws s3 cp s3://${{ secrets.S3_INTEGRATION_BUCKET }}/integration-test/packaging/${{ github.sha }}/buildMSI.zip .

      - name: Create msi
        if: steps.cached_msi.outputs.cache-hit != 'true'
        run : |
          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe
          .\wix311.exe /install /quiet /norestart
          $wixToolsetBinPath = ";C:\Program Files (x86)\WiX Toolset v3.11\bin;"
          $env:PATH = $env:PATH + $wixToolsetBinPath
          Expand-Archive buildMSI.zip -Force
          cd buildMSI
          .\create_msi.ps1 ${{ github.sha }} ${{ secrets.S3_INTEGRATION_BUCKET }}

  StartLocalStack:
    name: 'StartLocalStack'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: integration/terraform/ec2/localstack
    outputs:
      local_stack_host_name: ${{ steps.localstack.outputs.local_stack_host_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        id: localstack
        run: >
          echo run terraform and execute test code &&
          terraform apply --auto-approve
          -var="ssh_key=${PRIVATE_KEY}"
          -var="github_repo=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git"
          -var="github_sha=${GITHUB_SHA}" 
          -var="s3_bucket=${S3_INTEGRATION_BUCKET}"
          -var="vpc_security_group_ids=${VPC_SECURITY_GROUPS_IDS}"
          -var="key_name=${KEY_NAME}"
          -var="iam_instance_profile=${IAM_ROLE}" &&
          LOCAL_STACK_HOST_NAME=$(terraform output -raw public_dns) &&
          echo $LOCAL_STACK_HOST_NAME &&
          echo "::set-output name=local_stack_host_name::$LOCAL_STACK_HOST_NAME" &&
          aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/integration-test/local-stack-terraform-state/${GITHUB_SHA}/terraform.tfstate

  EC2LinuxIntegrationTest:
    needs: [MakeBinary, StartLocalStack]
    name: 'EC2LinuxIntegrationTest'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: integration/terraform/ec2/linux
    strategy:
      fail-fast: false
      matrix:
        arrays: [
          { os: "ubuntu", username: "ubuntu",
            # ubuntu needs to have dpkg lock cleared before installing cw agent
            installAgentCommand: "aptdcon --safe-upgrade && sudo dpkg -i -E ./amazon-cloudwatch-agent.deb",
            ami: "cloudwatch-agent-integration-test-ubuntu*", caCertPath: "/etc/ssl/certs/ca-certificates.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.deb" },
          { os: "al2", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-al2*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "rhel8", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-rhel8-base*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "rhel8-1", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-rhel8-1*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "rhel8-2", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-rhel8-2*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "rhel8-3", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-rhel8-3*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "rhel8-4", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-rhel8-4*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "ol8-1", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-ol8-1*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "ol8-2", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-ol8-2*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "o8-3", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-ol8-3*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" },
          { os: "ol8-4", username: "ec2-user",
            installAgentCommand: "rpm -U ./amazon-cloudwatch-agent.rpm",
            ami: "cloudwatch-agent-integration-test-ol8-4*", caCertPath: "/etc/ssl/certs/ca-bundle.crt",
            arc: "amd64", binaryName: "amazon-cloudwatch-agent.rpm" }
        ]
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Cache if success
        id: ec2-linux-integration-test
        uses: actions/cache@v2
        with:
          path: |
            RELEASE_NOTES
          key: ec2-linux-integration-test-${{ github.sha }}-${{ matrix.arrays.os }}

      - name: Echo OS
        run: echo run on ec2 instance os ${{ matrix.arrays.os }}

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        if: steps.ec2-linux-integration-test.outputs.cache-hit != 'true'
        run: >
          echo run terraform and execute test code &&
          terraform apply --auto-approve
          -var="ssh_key=${PRIVATE_KEY}"
          -var="github_repo=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git"
          -var="github_sha=${GITHUB_SHA}"
          -var="install_agent=${{ matrix.arrays.installAgentCommand }}"
          -var="user=${{ matrix.arrays.username }}"
          -var="ami=${{ matrix.arrays.ami }}"
          -var="ca_cert_path=${{ matrix.arrays.caCertPath }}"
          -var="arc=${{ matrix.arrays.arc }}"
          -var="binary_name=${{ matrix.arrays.binaryName }}"
          -var="local_stack_host_name=${{ needs.StartLocalStack.outputs.local_stack_host_name }}"
          -var="s3_bucket=${S3_INTEGRATION_BUCKET}"
          -var="vpc_security_group_ids=${VPC_SECURITY_GROUPS_IDS}"
          -var="key_name=${KEY_NAME}"
          -var="test_name=cw-integ-test-${{ matrix.arrays.os }}"
          -var="iam_instance_profile=${IAM_ROLE}"

      - name: Terraform destroy
        if: ${{ always() && steps.ec2-linux-integration-test.outputs.cache-hit != 'true' }}
        run: terraform destroy --auto-approve

  EC2WinIntegrationTest:
    needs: [BuildMSI]
    name: 'EC2WinIntegrationTest'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: integration/terraform/ec2/win
    strategy:
      fail-fast: false
      matrix:
        arrays: [
          { os: "win-2022", ami: "cloudwatch-agent-integration-test-win-2022*"}
        ]
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Cache if success
        id: ec2-win-integration-test
        uses: actions/cache@v2
        with:
          path: |
            RELEASE_NOTES
          key: ec2-win-integration-test-${{ github.sha }}-${{ matrix.arrays.os }}

      - name: Echo OS
        run: echo run on ec2 instance os ${{ matrix.arrays.os }}

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform init
        run: terraform init

      - name: Terraform apply
        if: steps.ec2-win-integration-test.outputs.cache-hit != 'true'
        run: >
          echo run terraform and execute test code &&
          terraform apply --auto-approve
          -var="ssh_key=${PRIVATE_KEY}"
          -var="key_name=${KEY_NAME}"
          -var="github_repo=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git"
          -var="github_sha=${GITHUB_SHA}"
          -var="ami=${{ matrix.arrays.ami }}"
          -var="test_name=cw-integ-test-${{ matrix.arrays.os }}"
          -var="iam_instance_profile=${IAM_ROLE}"
          -var="vpc_security_group_ids=${VPC_SECURITY_GROUPS_IDS}"
          -var="s3_bucket=${S3_INTEGRATION_BUCKET}"

      - name: Terraform destroy
        if: ${{ always() && steps.ec2-win-integration-test.outputs.cache-hit != 'true' }}
        run: >
          terraform destroy --auto-approve
          -var="ami=${{ matrix.arrays.ami }}"

  StopLocalStack:
    name: 'StopLocalStack'
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [StartLocalStack, EC2LinuxIntegrationTest]
    defaults:
      run:
        working-directory: integration/terraform/ec2/localstack
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Copy state
        run: aws s3 cp s3://${S3_INTEGRATION_BUCKET}/integration-test/local-stack-terraform-state/${GITHUB_SHA}/terraform.tfstate .

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform init
        run: terraform init

      - name: Terraform destroy
        run: terraform destroy --auto-approve