# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: Reusable ROSA E2E Test

env:
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours

on:
  workflow_call:
    inputs:
      terraform_dir:
        required: true
        type: string
      job_id:
        required: true
        type: string
      test_props:
        required: true
        type: string
      test_repo_name:
        required: true
        type: string
      test_repo_url:
        required: true
        type: string
      test_repo_branch:
        required: true
        type: string
      cloudwatch_agent_repository:
        required: true
        type: string
      cloudwatch_agent_tag:
        required: true
        type: string
      cloudwatch_agent_operator_repository:
        required: true
        type: string
      cloudwatch_agent_target_allocator_repository:
        required: false
        type: string
      cloudwatch_agent_operator_tag:
        required: true
        type: string
      region:
        required: true
        type: string
      helm_charts_branch:
        required: true
        type: string
      terraform_assume_role:
        required: true
        type: string
      agent_config:
        required: true
        type: string
      prometheus_config:
        required: false
        type: string
        default: ""
      otel_config:
        required: false
        type: string
        default: ""
      sample_app:
        required: true
        type: string

jobs:
  CreateCluster:
    name: "Create ROSA HCP Cluster"
    runs-on: ubuntu-latest
    outputs:
      cluster_id: ${{ steps.terraform.outputs.cluster_id }}
      cluster_name: ${{ steps.terraform.outputs.cluster_name }}
    strategy:
      fail-fast: false
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{inputs.test_repo_name}}
        ref: ${{inputs.test_repo_branch}}
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ inputs.terraform_assume_role}}
        aws-region: ${{ inputs.region }}
        role-duration-seconds: ${{ env.TERRAFORM_AWS_ASSUME_ROLE_DURATION }}
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
    - name: Verify Terraform version
      run: terraform --version

    - name: Terraform apply
      id: terraform
      uses: nick-fields/retry@v2
      env:
        TF_VAR_rhcs_token: ${{secrets.RHCS_ACCOUNT_TOKEN}}
        TF_VAR_billing_account_id: ${{secrets.ROSA_BILLING_ACCOUNT}}
        TF_VAR_aws_region: ${{inputs.region}}
        TF_VAR_cluster_name: rosa-cluster-${{github.run_id}}
      with:
        max_attempts: 1
        timeout_minutes: 60
        retry_wait_seconds: 5
        command: |
          cd terraform/rosa/e2e

          terraform init
          if terraform apply --auto-approve; then
            echo "cluster_id=$(terraform output -raw cluster_id)" >> $GITHUB_OUTPUT
            echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          else
            terraform destroy --auto-approve && exit 1
          fi

  ValidateCluster:
    needs: [CreateCluster]
    name: "Validate Cluster"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{inputs.test_repo_name}}
          ref: ${{inputs.test_repo_branch}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.terraform_assume_role}}
          aws-region: ${{ inputs.region }}
          role-duration-seconds: ${{ env.TERRAFORM_AWS_ASSUME_ROLE_DURATION }}

      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install OpenShift CLI
        uses: redhat-actions/oc-installer@v1

      - name: Install ROSA CLI
        shell: bash
        run: |
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz"
          tar -xvf rosa-linux.tar.gz
          sudo mv rosa /usr/local/bin/rosa
          chmod +x /usr/local/bin/rosa
          rm -f rosa-linux.tar.gz
          rosa version

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          parse-json-secrets: true
          secret-ids: |
            ,${{env.CLUSTER_NAME}}-htpasswd

      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          # URL to your OpenShift cluster.
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_username: ${{ env.OPENSHIFT_USERNAME }}
          openshift_password: ${{ env.OPENSHIFT_PASSWORD }}

      - name: Validate Cluster and Host ROSA Setup
        working-directory: test/e2e/rosa
        env:
          CLUSTER_NAME: ${{needs.CreateCluster.outputs.cluster_name}}
        run: go test -computeType=ROSA -eksClusterName=${{env.CLUSTER_NAME}} -eksDeploymentStrategy="DAEMON" -region=${{env.AWS_REGION}} -v
  RosaTest:
    needs: [CreateCluster,ValidateCluster]
    name: ${{matrix.arrays.testName}}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        arrays: ${{ fromJson(inputs.test_props) }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{inputs.test_repo_name}}
          ref: ${{inputs.test_repo_branch}}
      - uses: actions/checkout@v3
        with:
          repository: "aws-observability/helm-charts"
          ref: ${{inputs.helm_charts_branch}}
          path: "terraform/eks/e2e/helm-charts"# have to fix this later
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.terraform_assume_role}}
          aws-region: ${{ inputs.region }}
          role-duration-seconds: ${{ env.TERRAFORM_AWS_ASSUME_ROLE_DURATION }}
      - name: Login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Verify Terraform version
        run: terraform --version

      - name: Install OpenShift CLI
        uses: redhat-actions/oc-installer@v1

      - name: Install ROSA CLI
        shell: bash
        run: |
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz"
          tar -xvf rosa-linux.tar.gz
          sudo mv rosa /usr/local/bin/rosa
          chmod +x /usr/local/bin/rosa
          rm -f rosa-linux.tar.gz
          rosa version

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          parse-json-secrets: true
          secret-ids: |
            ,${{env.CLUSTER_NAME}}-htpasswd

      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          # URL to your OpenShift cluster.
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_username: ${{ env.OPENSHIFT_USERNAME }}
          openshift_password: ${{ env.OPENSHIFT_PASSWORD }}

      - name: ${{matrix.arrays.testName}}
        working-directory: ${{matrix.arrays.test_dir}}
        env:
          CLUSTER_NAME: ${{needs.CreateCluster.outputs.cluster_name}}
        run: |
          go test -computeType=ROSA -eksClusterName=${{env.CLUSTER_NAME}} -eksDeploymentStrategy="DAEMON" -region=${{env.AWS_REGION}} -v
          go test --destroy -computeType=ROSA -eksClusterName=${{env.CLUSTER_NAME}} -eksDeploymentStrategy="DAEMON" -region=${{env.AWS_REGION}} -v


  DestroyCluster:
    name: "Destroy ROSA HCP Cluster"
    needs: [CreateCluster, ValidateCluster, RosaTest]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform apply
        id: terraform
        uses: nick-fields/retry@v2
        env:
          TF_VAR_rhcs_token=${{secrets.RHCS_ACCOUNT_TOKEN}}
          TF_VAR_billing_account_id=${{secrets.ROSA_BILLING_ACCOUNT}}
        with:
          max_attempts: 1
          timeout_minutes: 60
          retry_wait_seconds: 5
          command: |
            cd terraform/rosa/e2e
            terraform destroy --auto-approve && exit 1
#
#      - name: Terraform apply
#        uses: nick-fields/retry@v2
#        env:
#
#        with:
#          max_attempts: 3
#          timeout_minutes: 60
#          retry_wait_seconds: 5
#          command: |
#            if [ "${{ inputs.terraform_dir }}" != "" ]; then
#              cd "${{ inputs.terraform_dir }}"
#            else
#              cd terraform/eks/e2e
#            fi
#
#            terraform init
#            if terraform apply --auto-approve \
#              -var="region=${{ inputs.region }}" \
#              -var="k8s_version=${{ matrix.arrays.k8s_version }}" \
#              -var="nodes=${{ matrix.arrays.nodes }}" \
#              -var="helm_charts_branch=${{ inputs.helm_charts_branch }}" \
#              -var="cloudwatch_agent_repository_url=${{ steps.login-ecr.outputs.registry }}" \
#              -var="cloudwatch_agent_repository=${{ inputs.cloudwatch_agent_repository }}" \
#              -var="cloudwatch_agent_tag=${{ inputs.cloudwatch_agent_tag }}" \
#              -var="cloudwatch_agent_operator_repository_url=${{ steps.login-ecr.outputs.registry }}" \
#              -var="cloudwatch_agent_operator_repository=${{ inputs.cloudwatch_agent_operator_repository }}" \
#              -var="cloudwatch_agent_operator_tag=${{ inputs.cloudwatch_agent_operator_tag }}" \
#              -var="cloudwatch_agent_target_allocator_repository_url=${{ steps.login-ecr.outputs.registry }}" \
#              -var="cloudwatch_agent_target_allocator_repository=${{ inputs.cloudwatch_agent_target_allocator_repository }}" \
#              -var="cloudwatch_agent_target_allocator_tag=${{ inputs.cloudwatch_agent_operator_tag }}" \
#              -var="test_dir=${{ matrix.arrays.test_dir }}" \
#              -var="agent_config=${{ inputs.agent_config }}" \
#              -var="prometheus_config=${{ inputs.prometheus_config }}" \
#              -var="otel_config=${{ inputs.otel_config }}" \
#              -var="sample_app=${{ inputs.sample_app }}"; then
#              terraform destroy --auto-approve
#            else
#              terraform destroy --auto-approve && exit 1
#            fi
#
#      - name: Terraform destroy
#        if: ${{ cancelled() || failure() }}
#        uses: nick-fields/retry@v2
#        with:
#          max_attempts: 3
#          timeout_minutes: 8
#          retry_wait_seconds: 5
#          command: |
#            if [ "${{ inputs.terraform_dir }}" != "" ]; then
#              cd "${{ inputs.terraform_dir }}"
#            else
#              cd terraform/eks/e2e
#            fi
#            terraform destroy --auto-approve
