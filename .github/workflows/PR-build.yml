# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: PR Build
on:
  pull_request:
    branches: 
      - main 
    types: 
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths-ignore:
      - '**/*.md'
      - 'NOTICE'
      - 'RELEASE_NOTES'
      - 'THIRD-PARTY'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/PR-build'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  macos-unittest:
    runs-on: macos-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: ~1.19.2

    - name: Check out code
      uses: actions/checkout@v3

    - name: Cache binaries
      id: cached_binaries
      uses: actions/cache@v3
      with:
        key: "cached-binaries-${{ runner.os }}-${{ github.sha }}"
        path: go.mod

    - name: Cache build output
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: |
              ~/Library/Caches/go-build
              ~/go/pkg/mod
        key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}

    - name: Unit Test
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make test

    - name: Upload coverage to Codecov
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      uses: codecov/codecov-action@v3
      with:
        verbose: true

    - name: Build 
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make amazon-cloudwatch-agent-mac
  
  windows-unittest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-2019, windows-latest ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ~1.19.2

      - name: Cache binaries
        id: cached_binaries
        uses: actions/cache@v3
        with:
          key: "cached-binaries-${{ matrix.os }}-${{ github.sha }}"
          path: go.mod

      - name: Cache Go
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: v1-go-pkg-mod-${{ matrix.os }}-${{ hashFiles('**/go.sum') }}

      - name: Install make
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        run: choco install make

      - name: Unit test
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        run: make test

      - name: Upload coverage to Codecov
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        uses: codecov/codecov-action@v3
        with:
          verbose: true

      - name: Build
        if: steps.cached_binaries.outputs.cache-hit != 'true'
        run: make amazon-cloudwatch-agent-windows
  
  linux-unittest:
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: ~1.19.2

    - name: Check out code
      uses: actions/checkout@v3

    - uses: zencargo/github-action-go-mod-tidy@v1
      with:
        go-version: 1.19.2

    - name: Cache binaries
      id: cached_binaries
      uses: actions/cache@v3
      with:
        key: "cached-binaries-${{ runner.os }}-${{ github.sha }}"
        path: go.mod

    - name: Cache build output
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      with:
        path: |
              ~/.cache/go-build
              ~/go/pkg/mod
        key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}

    
    - name: Unit Test
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make test

    - name: Upload coverage to Codecov
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      uses: codecov/codecov-action@v3
      with:
        verbose: true

    - name: Build
      if: steps.cached_binaries.outputs.cache-hit != 'true'
      run: make amazon-cloudwatch-agent-linux