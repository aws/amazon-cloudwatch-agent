# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

name: PR Build
env:
  TERRAFORM_AWS_ASSUME_ROLE: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours
  CWA_GITHUB_TEST_REPO_NAME: "aws/amazon-cloudwatch-agent-test"
  CWA_GITHUB_TEST_REPO_URL: "https://github.com/aws/amazon-cloudwatch-agent-test.git"
  CWA_GITHUB_TEST_REPO_BRANCH: "main"
  KEY_NAME: ${{ secrets.KEY_NAME }}
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  S3_INTEGRATION_BUCKET: ${{ vars.S3_INTEGRATION_BUCKET }}



on:
  workflow_dispatch:
  pull_request:
    branches:
      - main*
      - feature*
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  changes:
    name: Check changes
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.filter.outputs.build }}
      lint: ${{ steps.filter.outputs.lint }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: shell
          filters: .github/config/file-filters.yml

      - name: List all updated files
        run: |
          for file in ${{ steps.filter.outputs.build_files }}; do
            echo "$file"
          done

  lint:
    needs: [changes]
    name: Check lint
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        if: needs.changes.outputs.lint == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2
          cache: false

      - name: Check out code
        if: needs.changes.outputs.lint == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check format
        if: needs.changes.outputs.lint == 'true'
        run: |
          make fmt fmt-sh
          if [ ! -z "git status --porcelain" ]; then
            echo "make fmt changed files"
            git status
            exit 1
          fi

      - name: Check license and imports
        if: needs.changes.outputs.lint == 'true'
        run: make lint

  build:
    needs: [lint, changes]
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2019, windows-latest, macos-13]
        include:
          - os: ubuntu-latest
            family: linux
            cache-path: |
              ~/.cache/go-build
              ~/go/pkg/mod
          - os: macos-13
            family: darwin
            cache-path: |
              ~/Library/Caches/go-build
              ~/go/pkg/mod
          - os: windows-2019
            family: windows
            cache-path: |
              ~\AppData\Local\go-build
              ~\go\pkg\mod
          - os: windows-latest
            family: windows
            cache-path: |
              ~\AppData\Local\go-build
              ~\go\pkg\mod
    steps:
      - name: Set up Go 1.x
        if: needs.changes.outputs.build == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2
          cache: false

      - name: Check out code
        if: needs.changes.outputs.build == 'true'
        uses: actions/checkout@v3

      - name: Cache binaries
        id: cached_binaries
        if: needs.changes.outputs.build == 'true'
        uses: actions/cache@v3
        with:
          key: "cached-binaries-${{ matrix.os }}-${{ github.sha }}"
          path: go.mod

      - name: Cache build output
        if: steps.cached_binaries.outputs.cache-hit != 'true' && needs.changes.outputs.build == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ matrix.cache-path }}
          key: v1-go-pkg-mod-${{ matrix.os }}-${{ hashFiles('**/go.sum') }}

      - name: Install make
        if: matrix.family == 'windows' && steps.cached_binaries.outputs.cache-hit != 'true' && needs.changes.outputs.build == 'true'
        run: choco install make

      - name: Unit Test
        if: steps.cached_binaries.outputs.cache-hit != 'true' && needs.changes.outputs.build == 'true'
        run: make test

      - name: Build
        if: steps.cached_binaries.outputs.cache-hit != 'true' && needs.changes.outputs.build == 'true'
        run: make amazon-cloudwatch-agent-${{ matrix.family }}

  test-data-race:
    needs: [lint, changes]
    name: Test data race
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        if: needs.changes.outputs.build == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2
          cache: false

      - name: Check out code
        if: needs.changes.outputs.build == 'true'
        uses: actions/checkout@v3

      - name: Test data race
        if: needs.changes.outputs.build == 'true'
        run: make test-data-race


#
#  OutputEnvVariables:
#    needs: [ BuildAgent ]
#    name: 'OutputEnvVariables'
#    runs-on: ubuntu-latest
#    outputs:
#      CWA_GITHUB_TEST_REPO_NAME: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_NAME }}
#      CWA_GITHUB_TEST_REPO_URL: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_URL }}
#      CWA_GITHUB_TEST_REPO_BRANCH: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
#          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}
#
#      - name: Set up Go 1.x
#        uses: actions/setup-go@v4
#        with:
#          go-version: ~1.22.2
#
#      - name: SetOutputs
#        id: set-outputs
#        run: |
#          echo "::set-output name=CWA_GITHUB_TEST_REPO_NAME::${{ env.CWA_GITHUB_TEST_REPO_NAME }}"
#          echo "::set-output name=CWA_GITHUB_TEST_REPO_URL::${{ env.CWA_GITHUB_TEST_REPO_URL }}"
#          echo "::set-output name=CWA_GITHUB_TEST_REPO_BRANCH::${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}"
#
#      - name: Echo test variables
#        run: |
#          echo "CWA_GITHUB_TEST_REPO_NAME: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_NAME }}"
#          echo "CWA_GITHUB_TEST_REPO_URL: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_URL }}"
#          echo "CWA_GITHUB_TEST_REPO_BRANCH: ${{ steps.set-outputs.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}"
#


  OutputEnvVariables:
      name: 'OutputEnvVariables'
      runs-on: ubuntu-latest
      outputs:
        CWA_GITHUB_TEST_REPO_NAME:  "aws/amazon-cloudwatch-agent-test"
        CWA_GITHUB_TEST_REPO_URL: "https://github.com/aws/amazon-cloudwatch-agent-test.git"
        CWA_GITHUB_TEST_REPO_BRANCH: "main"
      steps:
        - uses: actions/checkout@v3
          with:
            repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
            ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

        - name: Set up Go 1.x
          uses: actions/setup-go@v4
          with:
            go-version: ~1.22.2

        - name: SetOutputs
          id: set-outputs
          run: |
            echo "::set-output name=CWA_GITHUB_TEST_REPO_NAME::${{ env.CWA_GITHUB_TEST_REPO_NAME }}"
            echo "::set-output name=CWA_GITHUB_TEST_REPO_URL::${{ env.CWA_GITHUB_TEST_REPO_URL }}"
            echo "::set-output name=CWA_GITHUB_TEST_REPO_BRANCH::${{ env.CWA_GITHUB_TEST_REPO_BRANCH }}"


  StartLocalStack:
    name: 'StartLocalStack'
    needs: [OutputEnvVariables]
    uses: ./.github/workflows/start-localstack.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      region: us-west-2
      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}
      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}
      github_sha: ${{ github.sha }}
      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET }}


  GenerateTestMatrix:
    needs: [OutputEnvVariables]
    name: 'GenerateTestMatrix'
    runs-on: ubuntu-latest
    outputs:
      ec2_linux_matrix: ${{ steps.set-matrix.outputs.ec2_linux_matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.2

      - name: Generate matrix
        id: set-matrix
        run: |
          go run --tags=generator generator/test_case_generator.go
          echo "ec2_linux_matrix=$(echo $(cat generator/resources/ec2_linux_complete_test_matrix.json))" >> "$GITHUB_OUTPUT"

      - name: Echo test plan matrix
        run: |
          echo "ec2_linux_matrix: ${{ steps.set-matrix.outputs.ec2_linux_matrix }}"

  BuildAgent:
    uses: ./.github/workflows/build-test-artifacts.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      test-image-before-upload: false


  EC2LinuxIntegrationTest:
    needs: [ GenerateTestMatrix, OutputEnvVariables ]
    name: 'EC2Linux'
    uses:  ./.github/workflows/ec2-integration-test.yml
    with:
      build_id: ${{ github.sha }}
      test_dir: terraform/ec2/linux
      job_id: ec2-linux-integration-test
      test_props: ${{ needs.GenerateTestMatrix.outputs.ec2_linux_matrix }}
      test_repo_name: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_NAME }}
      test_repo_url: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_URL }}
      test_repo_branch: ${{ needs.OutputEnvVariables.outputs.CWA_GITHUB_TEST_REPO_BRANCH }}
      localstack_host: ${{ needs.StartLocalStack.outputs.local_stack_host_name }}
      region: us-west-2
      terraform_assume_role: ${{ vars.TERRAFORM_AWS_ASSUME_ROLE }}
      s3_integration_bucket: ${{ vars.S3_INTEGRATION_BUCKET }}
      is_selinux_test: false
    secrets: inherit