name: go mod cache
env:
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  TERRAFORM_AWS_ASSUME_ROLE_DURATION: 14400 # 4 hours
  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  CF_IAM_ROLE: ${{ secrets.CF_IAM_ROLE }}
  CF_KEY_NAME: ${{ secrets.CF_KEY_NAME }}
  CACHE_EXIST: "false"
  CWA_GITHUB_REPO_NAME: "aws/amazon-cloudwatch-agent"
  #  S3_INTEGRATION_BUCKET: "terraform-integration-test"
  #  CACHE_DIR: "uniform-build-env-test/cache_build_env"
  CACHE_DIR: "s3://cloudwatch-agent-integration-bucket/cloudwatch-agent-integration-bucket/logs/"
on: push
jobs:
  cache:
    name: Go mod cache
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2
      - uses: actions/checkout@v3
        with:
          repository: ${{env.CWA_GITHUB_REPO_NAME}}
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.20.5
      - name: set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: go mod optimization
        run: |
          if aws s3 ls "s3://cloudwatch-agent-integration-bucket/vendorTest/vendor.zip"; then
             echo "time for copy file to vendor from s3 bucket"
             time aws s3 cp "s3://cloudwatch-agent-integration-bucket/vendorTest/vendor.zip" ./vendor.zip
             echo "time for unzipping the vendor file"
             time unzip vendor.zip
             rm -r vendor.zip
             set +e
             echo "building the cloudwatch agent"
             time make build GOMODCACHE=true
             build_exit_status=$?
             echo  "build status code:$build_exit_status"
             if [ $build_exit_status -ne 0 ]; then   #To handle the updated mod file
                 echo "Error detected while running 'go build -mod=vendor .'"
                 go mod tidy
                 go mod vendor
                 time make build GOMODCACHE=true
                 time zip -r vendor.zip vendor
                 echo "updating the vendor file and uploading zip file to s3 bucket"
                 aws s3 cp vendor.zip "s3://cloudwatch-agent-integration-bucket/vendorTest/vendor.zip"
                 rm -f vendor.zip
                 echo "vendor zip is updated and uploaded to s3 bucket"
             else
                echo "Build successful"
             fi
          else
            echo "created a zip file and adding to the s3 bucket"
            go mod tidy
            go clean -modcache
            go mod vendor 
            time make build GOMODCACHE=true
            echo "creating zip file"
            time zip -r vendor.zip vendor
            echo "copying zip file to s3 bucket"
            aws s3 cp vendor.zip "s3://cloudwatch-agent-integration-bucket/vendorTest/vendor.zip"
            echo "vendor zip added to the bucket"
           fi
           set -e
